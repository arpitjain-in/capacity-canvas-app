import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Edit, Trash2, Plus, User } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { dataService } from "@/utils/dataService";

interface Engineer {
  id: number;
  name: string;
  role: string;
  capacity: number;
  availableDays: number;
  allocatedDays: number;
}

interface ManageTeamModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const ManageTeamModal = ({ isOpen, onClose }: ManageTeamModalProps) => {
  const [engineers, setEngineers] = useState<Engineer[]>([]);
  const [editingEngineer, setEditingEngineer] = useState<Engineer | null>(null);
  const [isAddingNew, setIsAddingNew] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    role: "",
    capacity: 100,
    availableDays: 5,
    allocatedDays: 0,
  });
  const { toast } = useToast();

  useEffect(() => {
    if (isOpen) {
      setEngineers(dataService.getEngineers());
    }
  }, [isOpen]);

  const handleAddEngineer = () => {
    if (!formData.name || !formData.role) {
      toast({
        title: "Error",
        description: "Please fill in name and role",
        variant: "destructive",
      });
      return;
    }

    const newEngineer = {
      ...formData,
      id: Date.now(), // In real app, this would be generated by backend
    };

    const updatedEngineers = [...engineers, newEngineer];
    setEngineers(updatedEngineers);
    
    // Update dataService
    dataService.updateEngineer(0, newEngineer as any);

    toast({
      title: "Engineer Added",
      description: `${formData.name} has been added to the team`,
    });

    setFormData({ name: "", role: "", capacity: 100, availableDays: 5, allocatedDays: 0 });
    setIsAddingNew(false);
  };

  const handleUpdateEngineer = () => {
    if (!editingEngineer || !formData.name || !formData.role) return;

    const updatedEngineers = engineers.map(eng =>
      eng.id === editingEngineer.id ? { ...eng, ...formData } : eng
    );
    setEngineers(updatedEngineers);

    // Update dataService
    dataService.updateEngineer(editingEngineer.id, formData);

    toast({
      title: "Engineer Updated",
      description: `${formData.name}'s information has been updated`,
    });

    setEditingEngineer(null);
    setFormData({ name: "", role: "", capacity: 100, availableDays: 5, allocatedDays: 0 });
  };

  const handleDeleteEngineer = (id: number) => {
    const engineer = engineers.find(eng => eng.id === id);
    const updatedEngineers = engineers.filter(eng => eng.id !== id);
    setEngineers(updatedEngineers);

    toast({
      title: "Engineer Removed",
      description: `${engineer?.name} has been removed from the team`,
    });
  };

  const startEditing = (engineer: Engineer) => {
    setEditingEngineer(engineer);
    setFormData({
      name: engineer.name,
      role: engineer.role,
      capacity: engineer.capacity,
      availableDays: engineer.availableDays,
      allocatedDays: engineer.allocatedDays,
    });
    setIsAddingNew(false);
  };

  const getCapacityColor = (capacity: number) => {
    if (capacity >= 90) return "bg-green-500";
    if (capacity >= 70) return "bg-yellow-500";
    return "bg-red-500";
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Manage Team</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {/* Add New Engineer Button */}
          <Button
            onClick={() => {
              setIsAddingNew(true);
              setEditingEngineer(null);
              setFormData({ name: "", role: "", capacity: 100, availableDays: 5, allocatedDays: 0 });
            }}
            className="w-full"
            variant="outline"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add New Engineer
          </Button>

          {/* Add/Edit Form */}
          {(isAddingNew || editingEngineer) && (
            <Card>
              <CardContent className="pt-6">
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="engineer-name">Name</Label>
                      <Input
                        id="engineer-name"
                        placeholder="Engineer name"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="engineer-role">Role</Label>
                      <Input
                        id="engineer-role"
                        placeholder="e.g., Frontend Developer"
                        value={formData.role}
                        onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="capacity">Capacity (%)</Label>
                      <Input
                        id="capacity"
                        type="number"
                        min="0"
                        max="100"
                        value={formData.capacity}
                        onChange={(e) => setFormData({ ...formData, capacity: parseInt(e.target.value) || 0 })}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="available-days">Available Days</Label>
                      <Input
                        id="available-days"
                        type="number"
                        min="1"
                        max="7"
                        value={formData.availableDays}
                        onChange={(e) => setFormData({ ...formData, availableDays: parseInt(e.target.value) || 5 })}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="allocated-days">Allocated Days</Label>
                      <Input
                        id="allocated-days"
                        type="number"
                        min="0"
                        step="0.5"
                        value={formData.allocatedDays}
                        onChange={(e) => setFormData({ ...formData, allocatedDays: parseFloat(e.target.value) || 0 })}
                      />
                    </div>
                  </div>

                  <div className="flex justify-end space-x-2">
                    <Button
                      variant="outline"
                      onClick={() => {
                        setIsAddingNew(false);
                        setEditingEngineer(null);
                        setFormData({ name: "", role: "", capacity: 100, availableDays: 5, allocatedDays: 0 });
                      }}
                    >
                      Cancel
                    </Button>
                    <Button onClick={editingEngineer ? handleUpdateEngineer : handleAddEngineer}>
                      {editingEngineer ? "Update" : "Add"} Engineer
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Engineers List */}
          <div className="space-y-3">
            {engineers.map((engineer) => (
              <Card key={engineer.id}>
                <CardContent className="pt-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="flex items-center justify-center w-10 h-10 rounded-full bg-primary/10">
                        <User className="h-5 w-5 text-primary" />
                      </div>
                      <div>
                        <h3 className="font-medium">{engineer.name}</h3>
                        <p className="text-sm text-muted-foreground">{engineer.role}</p>
                        <div className="flex items-center space-x-2 mt-1">
                          <Badge className={`${getCapacityColor(engineer.capacity)} text-white text-xs`}>
                            {engineer.capacity}% capacity
                          </Badge>
                          <span className="text-xs text-muted-foreground">
                            {engineer.allocatedDays}/{engineer.availableDays} days
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => startEditing(engineer)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDeleteEngineer(engineer.id)}
                        className="text-destructive hover:text-destructive"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="flex justify-end pt-4">
            <Button onClick={onClose}>
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default ManageTeamModal;